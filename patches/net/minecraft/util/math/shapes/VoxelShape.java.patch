--- a/net/minecraft/util/math/shapes/VoxelShape.java
+++ b/net/minecraft/util/math/shapes/VoxelShape.java
@@ -19,7 +19,7 @@
 {
     protected final VoxelShapePart part;
 
-    VoxelShape(VoxelShapePart part)
+    public VoxelShape(VoxelShapePart part)
     {
         this.part = part;
     }
@@ -62,6 +62,11 @@
 
     public VoxelShape withOffset(double xOffset, double yOffset, double zOffset)
     {
+        return this.offset(xOffset, yOffset, zOffset).persistent();
+    }
+
+    public VoxelShape offset(double xOffset, double yOffset, double zOffset)
+    {
         return (VoxelShape)(this.isEmpty() ? VoxelShapes.empty() : new VoxelShapeArray(this.part, new OffsetDoubleList(this.getValues(EnumFacing.Axis.X), xOffset), new OffsetDoubleList(this.getValues(EnumFacing.Axis.Y), yOffset), new OffsetDoubleList(this.getValues(EnumFacing.Axis.Z), zOffset)));
     }
 
@@ -283,4 +288,29 @@
     {
         return this.isEmpty() ? "EMPTY" : "VoxelShape[" + this.getBoundingBox() + "]";
     }
+
+    public boolean compare(final VoxelShape shape, final IBooleanFunction desc)
+    {
+        return VoxelShapes.compare(this, shape, desc);
+    }
+
+    public boolean compare(final AxisAlignedBB shape, final IBooleanFunction desc)
+    {
+        return this.compare(new ocd.mcoptimizations.voxel.VoxelShapeAABB(shape), desc);
+    }
+
+    public boolean intersects(final VoxelShape shape)
+    {
+        return VoxelShapes.compare(this, shape, ocd.mcoptimizations.util.BooleanFunction.AND);
+    }
+
+    public boolean intersects(final AxisAlignedBB shape)
+    {
+        return this.intersects(new ocd.mcoptimizations.voxel.VoxelShapeAABB(shape));
+    }
+
+    public VoxelShape persistent()
+    {
+        return this;
+    }
 }
