--- a/net/minecraft/world/chunk/BlockStateContainer.java
+++ b/net/minecraft/world/chunk/BlockStateContainer.java
@@ -28,11 +28,29 @@
     private final Function<NBTTagCompound, T> deserializer;
     private final Function<T, NBTTagCompound> serializer;
     private final T defaultState;
-    protected BitArray storage;
-    private IBlockStatePalette<T> palette;
     private int bits;
     private final ReentrantLock lock = new ReentrantLock();
+    protected final java.util.concurrent.atomic.AtomicReference<DataContainer<T>> data = new java.util.concurrent.atomic.AtomicReference<>();
+    protected DataContainer<T> tmpData;
 
+    protected static class DataContainer<T>
+    {
+        protected final ocd.concurrent.util.AtomicBitArray storage;
+        private final IBlockStatePalette<T> palette;
+
+        public DataContainer(final ocd.concurrent.util.AtomicBitArray storage, final IBlockStatePalette<T> palette)
+        {
+            this.storage = storage;
+            this.palette = palette;
+        }
+    }
+
+    private void swapData()
+    {
+        this.data.lazySet(this.tmpData);
+        this.tmpData = null;
+    }
+
     private void lock()
     {
         if (this.lock.isLocked() && !this.lock.isHeldByCurrentThread())
@@ -65,6 +83,7 @@
         this.serializer = p_i48961_4_;
         this.defaultState = p_i48961_5_;
         this.setBits(4);
+        this.swapData();
     }
 
     private static int getIndex(int x, int y, int z)
@@ -74,36 +93,43 @@
 
     private void setBits(int bitsIn)
     {
-        if (bitsIn != this.bits)
+        if (true)
         {
+            final DataContainer<T> data = this.data.get();
+            final IBlockStatePalette<T> palette;
+
             this.bits = bitsIn;
 
             if (this.bits <= 4)
             {
                 this.bits = 4;
-                this.palette = new BlockStatePaletteLinear<T>(this.registry, this.bits, this, this.deserializer);
+                palette = new BlockStatePaletteLinear<T>(this.registry, this.bits, this, this.deserializer);
             }
             else if (this.bits < 9)
             {
-                this.palette = new BlockStatePaletteHashMap<T>(this.registry, this.bits, this, this.deserializer, this.serializer);
+                palette = new BlockStatePaletteHashMap<T>(this.registry, this.bits, this, this.deserializer, this.serializer);
             }
             else
             {
-                this.palette = this.field_205521_b;
+                palette = this.field_205521_b;
                 this.bits = MathHelper.log2DeBruijn(this.registry.size());
             }
 
-            this.palette.idFor(this.defaultState);
-            this.storage = new BitArray(this.bits, 4096);
+            palette.idFor(this.defaultState);
+            final ocd.concurrent.util.AtomicBitArray storage = new ocd.concurrent.util.AtomicBitArray(this.bits, 4096);
+
+            this.tmpData = new DataContainer<>(storage, palette);
         }
     }
 
     public int onResize(int p_onResize_1_, T p_onResize_2_)
     {
         this.lock();
-        BitArray bitarray = this.storage;
-        IBlockStatePalette<T> iblockstatepalette = this.palette;
+        final DataContainer<T> data = this.data.get();
+        ocd.concurrent.util.AtomicBitArray bitarray = data.storage;
+        IBlockStatePalette<T> iblockstatepalette = data.palette;
         this.setBits(p_onResize_1_);
+        final DataContainer<T> tmpData = this.tmpData;
 
         for (int i = 0; i < bitarray.size(); ++i)
         {
@@ -111,11 +137,12 @@
 
             if (t != null)
             {
-                this.set(i, t);
+                tmpData.storage.setAt(i, tmpData.palette.idFor(t));
             }
         }
 
-        int j = this.palette.idFor(p_onResize_2_);
+        int j = tmpData.palette.idFor(p_onResize_2_);
+        this.swapData();
         this.unlock();
         return j;
     }
@@ -129,8 +156,8 @@
 
     protected void set(int index, T state)
     {
-        int i = this.palette.idFor(state);
-        this.storage.setAt(index, i);
+        int i = this.data.get().palette.idFor(state);
+        this.data.get().storage.setAt(index, i);
     }
 
     public T get(int x, int y, int z)
@@ -140,7 +167,8 @@
 
     protected T get(int index)
     {
-        T t = this.palette.get(this.storage.getAt(index));
+        final DataContainer<T> data = this.data.get();
+        T t = data.palette.get(data.storage.getAt(index));
         return (T)(t == null ? this.defaultState : t);
     }
 
@@ -150,22 +178,25 @@
         this.lock();
         int i = buf.readByte();
 
-        if (this.bits != i)
+        if (true)
         {
             this.setBits(i);
         }
 
-        this.palette.read(buf);
-        buf.readLongArray(this.storage.getBackingLongArray());
+        final DataContainer<T> tmpData = this.tmpData;
+        tmpData.palette.read(buf);
+        tmpData.storage.read(buf);
+        this.swapData();
         this.unlock();
     }
 
     public void write(PacketBuffer buf)
     {
         this.lock();
+        final DataContainer<T> data = this.data.get();
         buf.writeByte(this.bits);
-        this.palette.write(buf);
-        buf.writeLongArray(this.storage.getBackingLongArray());
+        data.palette.write(buf);
+        buf.writeLongArray(data.storage.getSerializedLongArray());
         this.unlock();
     }
 
@@ -175,16 +206,17 @@
         NBTTagList nbttaglist = nbt.getList(paletteKey, 10);
         int i = Math.max(4, MathHelper.log2DeBruijn(nbttaglist.size()));
 
-        if (i != this.bits)
+        if (true)
         {
             this.setBits(i);
         }
 
-        this.palette.read(nbttaglist);
+        final DataContainer<T> tmpData = this.tmpData;
+        tmpData.palette.read(nbttaglist);
         long[] along = nbt.getLongArray(blockStatesKey);
         int j = along.length * 64 / 4096;
 
-        if (this.palette == this.field_205521_b)
+        if (tmpData.palette == this.field_205521_b)
         {
             IBlockStatePalette<T> iblockstatepalette = new BlockStatePaletteHashMap<T>(this.registry, i, this.field_205522_c, this.deserializer, this.serializer);
             iblockstatepalette.read(nbttaglist);
@@ -192,12 +224,12 @@
 
             for (int k = 0; k < 4096; ++k)
             {
-                this.storage.setAt(k, this.field_205521_b.idFor(iblockstatepalette.get(bitarray.getAt(k))));
+                tmpData.storage.setAt(k, this.field_205521_b.idFor(iblockstatepalette.get(bitarray.getAt(k))));
             }
         }
         else if (j == this.bits)
         {
-            System.arraycopy(along, 0, this.storage.getBackingLongArray(), 0, along.length);
+            tmpData.storage.read(along);
         }
         else
         {
@@ -205,10 +237,11 @@
 
             for (int l = 0; l < 4096; ++l)
             {
-                this.storage.setAt(l, bitarray1.getAt(l));
+                tmpData.storage.setAt(l, bitarray1.getAt(l));
             }
         }
 
+        this.swapData();
         this.unlock();
     }
 
@@ -241,6 +274,7 @@
 
     public int getSerializedSize()
     {
-        return 1 + this.palette.getSerializedSize() + PacketBuffer.getVarIntSize(this.storage.size()) + this.storage.getBackingLongArray().length * 8;
+        final DataContainer<T> data = this.data.get();
+        return 1 + data.palette.getSerializedSize() + PacketBuffer.getVarIntSize(data.storage.size()) + data.storage.serializedSize() * 8;
     }
 }
